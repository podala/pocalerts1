import zipfile
import json
import re
from openpyxl import load_workbook
from openpyxl.utils import get_column_letter, column_index_from_string
from lxml import etree
import pandas as pd

# === CONFIGURATION ===
INPUT_FILE = "input.xlsx"        # Set your input file name here
SHEET_NAME = "RA Output"         # Set your sheet name here
OUTPUT_FILE = "output_final.json"
MAX_ROWS = 10000
MAX_COLS = 200

# === PATTERN CONFIGS ===
PATTERN_CONFIGS = [
    {"patternName": "Pattern 1", "header_row_idx": 8, "subheader_row_idx": 9, "data_start_row": 10},
    {"patternName": "Pattern 2", "header_row_idx": 9, "subheader_row_idx": 10, "data_start_row": 11},
    {"patternName": "Pattern 3", "header_row_idx": 7, "subheader_row_idx": 8, "data_start_row": 9}
]

# === EXTRACT FORMULAS FROM XML ===
def extract_formula_map_from_xlsx(file_path):
    formula_map = {}
    with zipfile.ZipFile(file_path, 'r') as z:
        sheet_files = [f for f in z.namelist() if f.startswith("xl/worksheets/sheet")]
        for sheet_file in sheet_files:
            xml = z.read(sheet_file)
            tree = etree.XML(xml)
            for cell in tree.xpath("//ns:c", namespaces={"ns": "http://schemas.openxmlformats.org/spreadsheetml/2006/main"}):
                coord = cell.attrib.get("r")
                f_tag = cell.find("{http://schemas.openxmlformats.org/spreadsheetml/2006/main}f")
                if f_tag is not None and coord:
                    formula_map[coord] = f_tag.text
    return formula_map

# === EXTRACT LOOKUPS ===
def extract_lookups(formula_string):
    if not formula_string or not isinstance(formula_string, str):
        return []
    pattern = re.compile(r"([A-Za-z0-9_]+)!\$?([A-Z]+)\$?(\d+)")
    matches = pattern.findall(formula_string)
    return [
        {
            "sheetName": m[0],
            "excelColumn": m[1],
            "colNumber": column_index_from_string(m[1]),
            "rowNumber": int(m[2])
        } for m in matches
    ]

# === MAIN EXTRACTION LOGIC ===
def extract_from_single_sheet(file_path, sheet_name):
    wb = load_workbook(file_path, data_only=False)
    if sheet_name not in wb.sheetnames:
        raise ValueError(f"❌ Sheet '{sheet_name}' not found in workbook.")

    ws = wb[sheet_name]
    formula_map = extract_formula_map_from_xlsx(file_path)
    all_records = []

    for config in PATTERN_CONFIGS:
        pattern_used = config["patternName"]
        header_row_idx = config["header_row_idx"]
        subheader_row_idx = config["subheader_row_idx"]
        data_start_row = config["data_start_row"]

        # Load headers
        header_row = []
        subheader_row = []

        for col_idx in range(1, MAX_COLS + 1):
            header_val = ws.cell(row=header_row_idx, column=col_idx).value or ""
            subheader_val = ws.cell(row=subheader_row_idx, column=col_idx).value or ""
            header_row.append(str(header_val).strip())
            subheader_row.append(str(subheader_val).strip())

        # Iterate through data rows
        for row_idx in range(data_start_row, MAX_ROWS + 1):
            row_is_empty = True
            for col_idx in range(1, MAX_COLS + 1):
                cell = ws.cell(row=row_idx, column=col_idx)
                coord = f"{get_column_letter(col_idx)}{row_idx}"
                formula = formula_map.get(coord)
                val = cell.value

                if val is None and not formula:
                    continue

                row_is_empty = False

                record = {
                    "sheetName": sheet_name,
                    "patternUsed": pattern_used,
                    "rowNumber": row_idx,
                    "colNumber": col_idx,
                    "excelColumn": get_column_letter(col_idx),
                    "headerName": header_row[col_idx - 1] if col_idx - 1 < len(header_row) else "",
                    "subHeader": subheader_row[col_idx - 1] if col_idx - 1 < len(subheader_row) else "",
                    "extractedValue": str(val) if not formula else None,
                    "extractedFormula": formula,
                    "cellType": "formula" if formula else "value",
                    "lookups": extract_lookups(formula)
                }

                all_records.append(record)

            if row_is_empty:
                break

    return all_records

# === MAIN EXECUTION ===
if __name__ == "__main__":
    try:
        records = extract_from_single_sheet(INPUT_FILE, SHEET_NAME)
        with open(OUTPUT_FILE, "w", encoding="utf-8") as f:
            json.dump(records, f, indent=2, ensure_ascii=False)

        # OPTIONAL: Show first few lines in terminal
        df = pd.DataFrame(records)
        print(df.head(10))  # Preview first 10 rows

        print(f"\n✅ Extracted {len(records)} cells from '{SHEET_NAME}' to '{OUTPUT_FILE}'")

    except Exception as e:
        print(f"❌ ERROR: {e}")
