import React, { useState } from 'react';
import { Button, TextField, MenuItem, Grid, IconButton, Typography, Select, FormControl, InputLabel, Card, CardContent, Snackbar } from '@mui/material';
import { Delete, Save } from '@mui/icons-material';
import { styled } from '@mui/system';

const variableTypes = ['String', 'Number', 'Boolean', 'Date'];

const datasets = [
  {
    name: 'Drug Cost Dataset',
    variables:[
      { name: 'BASE PRICE', type: 'Number', description: 'The initial price of the product before any discounts or fees.' },
      { name: 'DISCOUNT', type: 'Number', description: 'The amount reduced from the base price.' },
      { name: 'UNITS SOLD', type: 'Number', description: 'The number of units sold for the product.' },
      { name: 'TAX', type: 'Number', description: 'The applicable tax on the product based on regional regulations.' },
      { name: 'FEE', type: 'Number', description: 'Additional fees associated with the product sale.' },
      { name: 'SHIPPING', type: 'Number', description: 'Shipping costs incurred during product delivery.' },
      { name: 'HANDLING', type: 'Number', description: 'Handling fees for managing the product.' },
      { name: 'COMMISSION', type: 'Number', description: 'Sales commission applied on the product sale.' },
      { name: 'MARKUP', type: 'Number', description: 'Additional percentage or value added to the base price.' },
      { name: 'REBATE', type: 'Number', description: 'Rebate amount that is returned to the buyer or client.' }
    ]
  },
  {
    name: 'Client Info Dataset',
    variables: [
      { name: 'ClientID', type: 'Number', description: 'Unique identifier for the client' },
      { name: 'ClientName', type: 'String', description: 'Name of the client' },
      { name: 'ContractStart', type: 'Date', description: 'Start date of the contract' },
      { name: 'ContractEnd', type: 'Date', description: 'End date of the contract' }
    ]
  }
];

const StyledCard = styled(Card)(({ theme }) => ({
  marginBottom: theme?.spacing?.(2) || '16px',
  boxShadow: theme?.shadows?.[3] || '0px 4px 8px rgba(0,0,0,0.1)',
}));

const InputOutputSection = ({ onNext }) => {
  const [selectedDataset, setSelectedDataset] = useState('');
  const [outputs, setOutputs] = useState([]);
  const [showSnackbar, setShowSnackbar] = useState(false);

  const handleAddOutput = () => {
    setOutputs([...outputs, { name: '', type: 'String', description: '' }]);
  };

  const handleChangeOutput = (index, field, value) => {
    const update = [...outputs];
    update[index][field] = value;
    setOutputs(update);
  };

  const handleDeleteOutput = (index) => {
    const update = [...outputs];
    update.splice(index, 1);
    setOutputs(update);
  };

  const handleSaveAndNext = () => {
    const selectedVariables = datasets.find((d) => d.name === selectedDataset)?.variables || [];
    const generatedJson = {
      dataset: selectedDataset,
      inputs: selectedVariables,
      outputs,
    };
    console.log('Generated JSON:', JSON.stringify(generatedJson, null, 2));
    setShowSnackbar(true);
    onNext();
  };

  const selectedVariables = datasets.find((d) => d.name === selectedDataset)?.variables || [];

  return (
    <Grid container spacing={3}>
      {/* Dataset Selection */}
      <Grid item xs={12}>
        <StyledCard>
          <CardContent>
            <FormControl fullWidth>
              <InputLabel>Select Dataset</InputLabel>
              <Select value={selectedDataset} onChange={(e) => setSelectedDataset(e.target.value)}>
                {datasets.map((dataset) => (
                  <MenuItem key={dataset.name} value={dataset.name}>{dataset.name}</MenuItem>
                ))}
              </Select>
            </FormControl>
          </CardContent>
        </StyledCard>
      </Grid>

      {/* Input Section */}
      <Grid item xs={6}>
        <Typography variant="h6">Inputs</Typography>
        {selectedVariables.length > 0 ? (
          selectedVariables.map((variable, index) => (
            <StyledCard key={index}>
              <CardContent>
                <Grid container spacing={2}>
                  <Grid item xs={4}><TextField label="Name" value={variable.name} disabled /></Grid>
                  <Grid item xs={4}><TextField label="Type" value={variable.type} disabled /></Grid>
                  <Grid item xs={4}><TextField label="Description" value={variable.description || '-'} disabled /></Grid>
                </Grid>
              </CardContent>
            </StyledCard>
          ))
        ) : (
          <Typography>No dataset selected or no variables available.</Typography>
        )}
      </Grid>

      {/* Output Section */}
      <Grid item xs={6}>
        <Typography variant="h6">Outputs</Typography>
        {outputs.map((output, index) => (
          <StyledCard key={index}>
            <CardContent>
              <Grid container spacing={2}>
                <Grid item xs={4}><TextField label="Name" value={output.name} onChange={(e) => handleChangeOutput(index, 'name', e.target.value)} /></Grid>
                <Grid item xs={4}>
                  <TextField select label="Type" value={output.type} onChange={(e) => handleChangeOutput(index, 'type', e.target.value)}>
                    {variableTypes.map((type) => <MenuItem key={type} value={type}>{type}</MenuItem>)}
                  </TextField>
                </Grid>
                <Grid item xs={3}><TextField label="Description" value={output.description} onChange={(e) => handleChangeOutput(index, 'description', e.target.value)} /></Grid>
                <Grid item xs={1}><IconButton onClick={() => handleDeleteOutput(index)}><Delete color="error" /></IconButton></Grid>
              </Grid>
            </CardContent>
          </StyledCard>
        ))}
        <Button onClick={handleAddOutput} variant="contained" sx={{ mt: 2, mr: 2 }}>Add Output</Button>
        <Button onClick={handleSaveAndNext} variant="contained" color="primary" startIcon={<Save />}>Save and Next</Button>
      </Grid>

      <Snackbar open={showSnackbar} autoHideDuration={3000} onClose={() => setShowSnackbar(false)} message="JSON Generated Successfully!" />
    </Grid>
  );
};

export default InputOutputSection;
====================================

  import React, { useState } from 'react';
import { Button, Box, TextField, MenuItem, Typography } from '@mui/material';

const datasetOptions = ['Drug Data Set', 'Rebate Data Set'];
const statusOptions = ['Draft', 'Active', 'Inactive', 'Archived'];
const priorityOptions = ['Low', 'Medium', 'High', 'Critical'];

const RuleDetails = ({ onNext }) => {
  const [ruleDetails, setRuleDetails] = useState({
    ruleName: '',
    version: '',
    createdBy: '',
    deploymentDate: '',
    dataset: '',
    description: '',
    status: '',
    priority: '',
    effectiveDate: '',
    expirationDate: '',
    tags: ''
  });

  const handleChange = (e) => {
    const { name, value } = e.target;
    setRuleDetails((prev) => ({ ...prev, [name]: value }));
  };

  const handleNext = () => {
    if (ruleDetails.ruleName && ruleDetails.version && ruleDetails.createdBy && ruleDetails.deploymentDate && ruleDetails.dataset) {
      onNext(ruleDetails);
    } else {
      alert('Please fill in all required fields.');
    }
  };

  return (
    <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2, maxWidth: '600px', margin: 'auto' }}>
      <Typography variant="h5">Rule Details</Typography>
      <TextField label="Rule Name" name="ruleName" value={ruleDetails.ruleName} onChange={handleChange} required />
      <TextField label="Version" name="version" value={ruleDetails.version} onChange={handleChange} required />
      <TextField label="Created By" name="createdBy" value={ruleDetails.createdBy} onChange={handleChange} required />
      <TextField label="Deployment Date" name="deploymentDate" type="date" value={ruleDetails.deploymentDate} onChange={handleChange} InputLabelProps={{ shrink: true }} required />
      <TextField select label="Mapped to Dataset" name="dataset" value={ruleDetails.dataset} onChange={handleChange} required>
        {datasetOptions.map((option) => (<MenuItem key={option} value={option}>{option}</MenuItem>))}
      </TextField>
      <TextField label="Description" name="description" value={ruleDetails.description} onChange={handleChange} multiline rows={3} />
      <TextField select label="Status" name="status" value={ruleDetails.status} onChange={handleChange} required>
        {statusOptions.map((option) => (<MenuItem key={option} value={option}>{option}</MenuItem>))}
      </TextField>
      <TextField select label="Priority" name="priority" value={ruleDetails.priority} onChange={handleChange} required>
        {priorityOptions.map((option) => (<MenuItem key={option} value={option}>{option}</MenuItem>))}
      </TextField>
      <TextField label="Effective Date" name="effectiveDate" type="date" value={ruleDetails.effectiveDate} onChange={handleChange} InputLabelProps={{ shrink: true }} />
      <TextField label="Expiration Date" name="expirationDate" type="date" value={ruleDetails.expirationDate} onChange={handleChange} InputLabelProps={{ shrink: true }} />
      <TextField label="Tags" name="tags" value={ruleDetails.tags} onChange={handleChange} placeholder="Add tags separated by commas" />
      <Button variant="contained" onClick={handleNext}>Save & Next</Button>
    </Box>
  );
};

export default RuleDetails;

=============================================

  import React, { useState } from 'react';
import { Button, Stepper, Step, StepLabel, Box, Typography } from '@mui/material';
import RuleDetails from './RuleDetails';
import InputOutputSection from './InputOutputSection';

const steps = ['Rule Details', 'Input-Output Section', 'Formula Section', 'Condition and Action Section', 'Final Review'];

const RuleCreationPanel = () => {
  const [activeStep, setActiveStep] = useState(0);

  const handleNext = () => setActiveStep((prev) => Math.min(prev + 1, steps.length - 1));
  const handleBack = () => setActiveStep((prev) => Math.max(prev - 1, 0));
  const handleStepClick = (step) => setActiveStep(step);

  const renderContent = () => {
    switch (activeStep) {
      case 0: return <RuleDetails onNext={handleNext} />;
      case 1: return <InputOutputSection onNext = {handleNext} />;
      case 2: return <Typography>Formula Section Content</Typography>;
      case 3: return <Typography>Condition and Action Section Content</Typography>;
      case 4: return <Typography>Final Review Content</Typography>;
      default: return null;
    }
  };

  return (
    <Box sx={{ p: 4, display: 'flex', flexDirection: 'column', alignItems: 'center', minHeight: '100vh' }}>
      <Box sx={{ width: '100%', maxWidth: '900px' }}>
        <Typography variant="h4" gutterBottom align="center">Rule Creation Panel</Typography>
        <Stepper activeStep={activeStep} alternativeLabel>
          {steps.map((label, index) => (
            <Step key={label} onClick={() => handleStepClick(index)}>
              <StepLabel>{label}</StepLabel>
            </Step>
          ))}
        </Stepper>

        <Box sx={{ mt: 4, textAlign: 'center' }}>{renderContent()}</Box>

        {activeStep !== 0 && (
          <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 4 }}>
            <Button onClick={handleBack} disabled={activeStep === 0}>Back</Button>
            <Button onClick={handleNext} disabled={activeStep === steps.length - 1}>Next</Button>
          </Box>
        )}
      </Box>
    </Box>
  );
};

export default RuleCreationPanel;
====================================

import React, { useState,useRef } from 'react'; 

import { Grid, Paper, Typography, Button, TextField, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Switch, FormControlLabel, MenuItem, Select, FormControl, InputLabel } from '@mui/material';

function Formula() {
  const [formulaName, setFormulaName] = useState('');
  const [formula, setFormula] = useState('');
  const [jsonOutput, setJsonOutput] = useState([]);
  const [selectedFields, setSelectedFields] = useState([]);
  const [outputFields, setOutputFields] = useState([]);
  const [showAdvanced, setShowAdvanced] = useState(false);
  const [enableLookup, setEnableLookup] = useState(false);
  const [selectedFile, setSelectedFile] = useState('');
  const inputFieldsRef = useRef(null);
  const outputFieldsRef = useRef(null);
  const columnHeaders = ['BASE PRICE', 'DISCOUNT', 'UNITS SOLD', 'TAX', 'FEE', 'SHIPPING', 'HANDLING', 'COMMISSION', 'MARKUP', 'REBATE'];
  const outputColumnHeaders = ['Final Price', 'Total Revenue', 'Net Profit'];
  const operators = ['+', '-', '*', '/', 'SUM()', 'AVG()', 'MAX()', 'MIN()', 'LOOKUP()'];
  const lookupFiles = ['File1.csv', 'File2.csv', 'File3.csv'];

  const sampleData = [
    { 'BASE PRICE': 100, 'DISCOUNT': 10, 'UNITS SOLD': 50, 'TAX': 5, 'FEE': 2, 'SHIPPING': 8, 'HANDLING': 3, 'COMMISSION': 6, 'MARKUP': 12, 'REBATE': 4 },
    { 'BASE PRICE': 200, 'DISCOUNT': 20, 'UNITS SOLD': 30, 'TAX': 10, 'FEE': 3, 'SHIPPING': 12, 'HANDLING': 4, 'COMMISSION': 8, 'MARKUP': 15, 'REBATE': 5 },
    { 'BASE PRICE': 150, 'DISCOUNT': 15, 'UNITS SOLD': 40, 'TAX': 7, 'FEE': 2.5, 'SHIPPING': 10, 'HANDLING': 3.5, 'COMMISSION': 7, 'MARKUP': 14, 'REBATE': 4.5 },
    { 'BASE PRICE': 120, 'DISCOUNT': 12, 'UNITS SOLD': 60, 'TAX': 6, 'FEE': 1.8, 'SHIPPING': 7, 'HANDLING': 2.5, 'COMMISSION': 5.5, 'MARKUP': 10, 'REBATE': 3.5 },
    { 'BASE PRICE': 180, 'DISCOUNT': 18, 'UNITS SOLD': 45, 'TAX': 9, 'FEE': 2.7, 'SHIPPING': 11, 'HANDLING': 3.2, 'COMMISSION': 7.8, 'MARKUP': 13, 'REBATE': 4.8 },
    { 'BASE PRICE': 250, 'DISCOUNT': 25, 'UNITS SOLD': 20, 'TAX': 12, 'FEE': 4, 'SHIPPING': 15, 'HANDLING': 5, 'COMMISSION': 9, 'MARKUP': 18, 'REBATE': 6 },
    { 'BASE PRICE': 90, 'DISCOUNT': 9, 'UNITS SOLD': 55, 'TAX': 4.5, 'FEE': 1.5, 'SHIPPING': 6.5, 'HANDLING': 2.8, 'COMMISSION': 5, 'MARKUP': 11, 'REBATE': 3 },
    { 'BASE PRICE': 300, 'DISCOUNT': 30, 'UNITS SOLD': 25, 'TAX': 15, 'FEE': 5, 'SHIPPING': 20, 'HANDLING': 6, 'COMMISSION': 10, 'MARKUP': 20, 'REBATE': 7 },
    { 'BASE PRICE': 110, 'DISCOUNT': 11, 'UNITS SOLD': 48, 'TAX': 5.5, 'FEE': 1.7, 'SHIPPING': 7.5, 'HANDLING': 3, 'COMMISSION': 5.8, 'MARKUP': 12.5, 'REBATE': 3.8 },
    { 'BASE PRICE': 160, 'DISCOUNT': 16, 'UNITS SOLD': 35, 'TAX': 8, 'FEE': 2.2, 'SHIPPING': 9, 'HANDLING': 3.3, 'COMMISSION': 7.2, 'MARKUP': 14.5, 'REBATE': 4.2 },
    { 'BASE PRICE': 210, 'DISCOUNT': 21, 'UNITS SOLD': 28, 'TAX': 10.5, 'FEE': 3.5, 'SHIPPING': 13, 'HANDLING': 4.2, 'COMMISSION': 8.5, 'MARKUP': 16, 'REBATE': 5.5 },
    { 'BASE PRICE': 130, 'DISCOUNT': 13, 'UNITS SOLD': 52, 'TAX': 6.5, 'FEE': 2, 'SHIPPING': 8.5, 'HANDLING': 3.2, 'COMMISSION': 6.2, 'MARKUP': 13, 'REBATE': 4 },
    { 'BASE PRICE': 175, 'DISCOUNT': 17.5, 'UNITS SOLD': 42, 'TAX': 8.5, 'FEE': 2.6, 'SHIPPING': 10.5, 'HANDLING': 3.7, 'COMMISSION': 7.5, 'MARKUP': 15, 'REBATE': 4.7 }
  ];
  
  const handleAddToFormula = (value) => {
    setFormula((prev) => prev + (prev ? ' ' : '') + value);
  };

  const handleFieldSelection = (field) => {
    handleAddToFormula(field);
    setSelectedFields((prev) => [...prev, field]);
  };

  const handleOutputFieldSelection = (field) => {
    if (!outputFields.includes(field)) {
      setOutputFields((prev) => [...prev, field]);
      handleAddToFormula(`${field} =`);
    }
  };

  const handleSave = () => {
    const output = {
      formulaName,
      formula,
      selectedFields,
      outputFields,
      enableLookup,
      selectedFile: enableLookup ? selectedFile : null,
    };
    setJsonOutput((prev) => [...prev, output]);

    // Clear formula fields after saving, but keep formula name
    setFormula('');
    setSelectedFields([]);
    setOutputFields([]);
    setEnableLookup(false);
    setSelectedFile('');
  };

  return (
    <Grid container spacing={2} style={{ padding: 16 }}>
      {/* Operators Section */}
      <Grid item xs={2}>
        <Paper style={{ padding: '16px', height: '80vh', overflowY: 'auto' }}>
          <Typography variant="h6">Operators</Typography>
          {operators.map((op) => (
            <Button key={op} onClick={() => handleAddToFormula(op)} style={{ marginBottom: '8px', width: '100%' }}>
              {op}
            </Button>
          ))}
        </Paper>
      </Grid>

      {/* Formula Section with Input Data Below */}
      <Grid item xs={6}>
        <Paper style={{ padding: 16, marginBottom: 16 }}>
          <Typography variant="h6">Formula Name</Typography>
          <TextField placeholder="Enter formula name" value={formulaName} onChange={(e) => setFormulaName(e.target.value)} style={{ width: '70%', marginBottom: '16px' }} />
          <Typography variant="h6">Formula</Typography>
          <TextField fullWidth multiline rows={3} value={formula} onChange={(e) => setFormula(e.target.value)} />
          <FormControlLabel
            control={<Switch checked={showAdvanced} onChange={() => setShowAdvanced((prev) => !prev)} />}
            label="Show Advanced Configuration"
          />
          <FormControlLabel
            control={<Switch checked={enableLookup} onChange={() => setEnableLookup((prev) => !prev)} />}
            label="Enable Lookup Mode"
          />
          {enableLookup && (
            <FormControl style={{ marginTop: 16, width: '100%' }}>
              <InputLabel>Select File for Lookup</InputLabel>
              <Select value={selectedFile} onChange={(e) => setSelectedFile(e.target.value)}>
                {lookupFiles.map((file) => (
                  <MenuItem key={file} value={file}>{file}</MenuItem>
                ))}
              </Select>
            </FormControl>
          )}
          <Button variant="contained" onClick={handleSave} style={{ marginTop: '16px' }}>Save Formula</Button>
        </Paper>
        <Paper style={{ padding: 16, height: '30vh', overflowY: 'auto' }}>
          <Typography variant="h6">Input Data Preview</Typography>
          <TableContainer component={Paper} style={{ maxHeight: '28vh', overflowY: 'auto' }}>
            <Table stickyHeader>
              <TableHead>
                <TableRow>
                  {columnHeaders.map((header) => (
                    <TableCell key={header}>{header}</TableCell>
                  ))}
                </TableRow>
              </TableHead>
              <TableBody>
                {sampleData.map((row, index) => (
                  <TableRow key={index}>
                    {columnHeaders.map((header) => (
                      <TableCell key={header}>{row[header]}</TableCell>
                    ))}
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </TableContainer>
        </Paper>
      </Grid>

      {/* Input Fields and Output Section */}
      <Grid item xs={4}>
    {/* Input Fields with Ref */}
    <Paper style={{ padding: '16px', height: '35vh' }}>
  <Typography variant="h6">Input Fields</Typography>
  <div style={{ overflowY: 'scroll', maxHeight: '30vh' }}>
    {columnHeaders.map((field) => (
      <Button key={field} onClick={() => handleFieldSelection(field)} style={{ marginBottom: '8px', width: '100%' }}>
        {field}
      </Button>
    ))}
  </div>
</Paper>

  {/* Output Fields with Ref */}
  <Paper style={{ padding: '16px', height: '15vh', overflowY: 'auto', marginTop: 16 }} ref={outputFieldsRef}>
    <Typography variant="h6">Output Fields</Typography>
    {outputColumnHeaders.map((field) => (
      <Button key={field} onClick={() => handleOutputFieldSelection(field)} style={{ marginBottom: '8px', width: '100%' }}>
        {field}
      </Button>
    ))}
  </Paper>

        <Paper style={{ padding: 16, height: '35vh', overflowY: 'auto', marginTop: 16 }}>
          <Typography variant="h6">Output Data</Typography>
          {jsonOutput.length ? (
            <pre style={{ overflowX: 'auto' }}>{JSON.stringify(jsonOutput, null, 2)}</pre>
          ) : (
            <Typography>No output data available. Please create a formula.</Typography>
          )}
        </Paper>
      </Grid>
    </Grid>
  );
}

export default Formula;
=================================


  

  
