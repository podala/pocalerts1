import os
import re
import json
from pyxlsb import open_workbook as open_xlsb
from openpyxl.utils import column_index_from_string

# ðŸ”§ Change this to your input file
INPUT_FILE = "your_file_name.xlsb"
OUTPUT_FILE = "parsed_formula_details.json"

def load_all_headers(file_path):
    headers_by_sheet = {}
    with open_xlsb(file_path) as wb:
        for sheet_name in wb.sheets:
            with wb.get_sheet(sheet_name) as sheet:
                headers = {}
                for row in sheet.rows():
                    for i, cell in enumerate(row):
                        headers[i + 1] = str(cell.v).strip() if cell.v else f"Col{i+1}"
                    break  # Only first row is header
                headers_by_sheet[sheet_name] = headers
    return headers_by_sheet

def extract_column_references(formula, current_sheet, all_headers):
    if not formula or not formula.startswith("="):
        return []

    refs = re.findall(r"(?:([A-Za-z0-9_]+)!)?(\$?[A-Z]{1,3})\$?[0-9]+", formula)
    seen = set()
    resolved = []

    for sheet_name, col_letters in refs:
        ref_sheet = sheet_name if sheet_name else current_sheet
        col_index = column_index_from_string(col_letters.replace("$", ""))
        col_name = all_headers.get(ref_sheet, {}).get(col_index, f"Col{col_index}")
        ref_key = f"{ref_sheet}!{col_letters}"
        if ref_key not in seen:
            resolved.append({
                "ref": f"{sheet_name + '!' if sheet_name else ''}{col_letters}",
                "sheet": ref_sheet,
                "column_letter": col_letters,
                "column_index": col_index,
                "column_name": col_name
            })
            seen.add(ref_key)

    return resolved

def parse_formulas_with_metadata(file_path):
    all_headers = load_all_headers(file_path)
    parsed = []

    with open_xlsb(file_path) as wb:
        for target_sheet in wb.sheets:
            header_map = all_headers.get(target_sheet, {})
            with wb.get_sheet(target_sheet) as sheet:
                all_rows = list(sheet.rows())[1:]  # Skip header
                empty_row_counter = 0

                for i, row in enumerate(all_rows):
                    row_index = i + 2
                    if all(cell.v is None or str(cell.v).strip() == "" for cell in row):
                        empty_row_counter += 1
                        if empty_row_counter > 5:
                            break
                        continue
                    else:
                        empty_row_counter = 0

                    row_dict = {
                        header_map.get(j + 1, f"Col{j+1}"): cell.v
                        for j, cell in enumerate(row)
                        if cell.v is not None and str(cell.v).strip() != ""
                    }

                    for col_index, cell in enumerate(row):
                        col_idx = col_index + 1
                        value = cell.v
                        formula = getattr(cell, "formula", None)
                        is_formula = bool(formula)

                        if not is_formula:
                            continue

                        column_refs = extract_column_references(formula, target_sheet, all_headers)

                        parsed.append({
                            "sheet_name": target_sheet,
                            "row": row_index,
                            "column_index": col_idx,
                            "column_name": header_map.get(col_idx, f"Col{col_idx}"),
                            "is_formula": True,
                            "formula": formula,
                            "value": value,
                            "column_references": column_refs,
                            "full_row": row_dict
                        })

    return parsed

def save_output(data, output_path):
    with open(output_path, "w") as f:
        json.dump(data, f, indent=2)
    print(f"âœ… Output saved to {output_path} with {len(data)} formula cells.")

if __name__ == "__main__":
    results = parse_formulas_with_metadata(INPUT_FILE)
    save_output(results, OUTPUT_FILE)
