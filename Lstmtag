import torch
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import DataLoader, Dataset
from torch.nn.utils.rnn import pad_sequence, pack_padded_sequence, pad_packed_sequence
from torchcrf import CRF
from sklearn.preprocessing import LabelEncoder
import numpy as np
import random

# Generate sample data
def generate_data(num_samples):
    team_names = ["Supervisors", "ProjectX", "AlphaTeam", "Zebra", "Champions"]
    user_names = ["Alice", "Bob", "Charlie", "David"]
    commands = [
        "Initialize team {} with {}",
        "Setup team {} with members {}",
        "Register team {} and include {}",
        "Form team {} and add {}"
    ]
    sentences = []
    annotations = []
    for _ in range(num_samples):
        team = random.choice(team_names)
        users = ', '.join(random.sample(user_names, random.randint(1, 3)))
        sentence = random.choice(commands).format(team, users)
        sentences.append(sentence.split())  # Split sentence into words
        annotations.append(['O']*len(sentence.split()))  # Simple placeholder labels
    return sentences, annotations

# Custom Dataset
class NERDataset(Dataset):
    def __init__(self, sentences, annotations, word_to_ix, label_encoder):
        self.sentences = [torch.tensor([word_to_ix.get(word, word_to_ix['<UNK>']) for word in sentence], dtype=torch.long) for sentence in sentences]
        self.labels = [torch.tensor([label_encoder.transform([label])[0] for label in ann], dtype=torch.long) for ann in annotations]

    def __len__(self):
        return len(self.sentences)

    def __getitem__(self, idx):
        return self.sentences[idx], self.labels[idx], len(self.sentences[idx])

def pad_collate(batch):
    sentences, labels, lengths = zip(*batch)
    sentences_padded = pad_sequence(sentences, batch_first=True, padding_value=0)
    labels_padded = pad_sequence(labels, batch_first=True, padding_value=-1)
    return sentences_padded, labels_padded, torch.tensor(lengths)

# Model Definition
class BiLSTM_CRF(nn.Module):
    def __init__(self, vocab_size, tagset_size):
        super(BiLSTM_CRF, self).__init__()
        self.embedding = nn.Embedding(vocab_size, 50)
        self.lstm = nn.LSTM(50, 32, num_layers=1, bidirectional=True, batch_first=True)
        self.hidden2tag = nn.Linear(64, tagset_size)
        self.crf = CRF(tagset_size, batch_first=True)

    def forward(self, sentence, lengths):
        embeds = self.embedding(sentence)
        packed = pack_padded_sequence(embeds, lengths, batch_first=True, enforce_sorted=False)
        lstm_out, _ = self.lstm(packed)
        lstm_out, _ = pad_packed_sequence(lstm_out, batch_first=True)
        lstm_feats = self.hidden2tag(lstm_out)
        return lstm_feats

    def loss(self, feats, tags, mask):
        return -self.crf(feats, tags, mask=mask)

# Training function
def train(model, device, train_loader, optimizer, epochs=10):
    model.train()
    for epoch in range(epochs):
        total_loss = 0
        for sentences, labels, lengths in train_loader:
            sentences, labels, lengths = sentences.to(device), labels.to(device), lengths.to(device)
            model.zero_grad()
            feats = model(sentences, lengths)
            mask = labels != -1
            loss = model.loss(feats, labels, mask)
            loss.backward()
            optimizer.step()
            total_loss += loss.item()
        print(f"Epoch: {epoch}, Loss: {total_loss / len(train_loader)}")

# Prediction function
def predict(model, sentence, word_to_ix, device):
    model.eval()
    tokens = [word_to_ix.get(word, word_to_ix['<UNK>']) for word in sentence.split()]
    input_ids = torch.tensor([tokens], dtype=torch.long).to(device)
    lengths = torch.tensor([len(input_ids[0])], dtype=torch.long).to(device)
    with torch.no_grad():
        feats = model(input_ids, lengths)
        tags = model.crf.decode(feats)
    return tags

# Main execution block
if __name__ == "__main__":
    sentences, annotations = generate_data(100)
    word_to_ix = {word: i for i, word in enumerate(set(w for s in sentences for w in s.split()), 1)}
    word_to_ix['<UNK>'] = 0  # Handling unknown words
    label_encoder = LabelEncoder()
    label_encoder.fit(['O', 'TEAM_NAME', 'USER'])  # Example labels

    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    model = BiLSTM_CRF(len(word_to_ix), len(label_encoder.classes_)).to(device)
    optimizer = optim.Adam(model.parameters(), lr=0.001)

    dataset = NERDataset(sentences, annotations, word_to_ix, label_encoder)
    train_loader = DataLoader(dataset, batch_size=32, shuffle=True, collate_fn=pad_collate)

    train(model, device, train_loader, optimizer)

    # Example prediction
    sample_sentence = "Initialize team AlphaTeam with Alice, Bob"
    predicted_tags = predict(model, sample_sentence, word_to_ix, device)
    print("Predicted Tags:", predicted_tags)
