WITH ProgramAgreementTasks AS (
    -- Identify the program agreement task ID and date range for each program for the member
    SELECT member_id, program_id, MIN(task_id) as program_agreement_task_id, MIN(task_date) as start_date, MAX(task_date) as end_date
    FROM task_table
    WHERE program_id != -1
    GROUP BY member_id, program_id
),
ProgramComparisons AS (
    SELECT 
        p1.member_id,
        p1.program_id AS previous_program_id,
        p2.program_id AS next_program_id,
        p1.program_agreement_task_id AS previous_program_agreement_task_id,
        p2.program_agreement_task_id AS next_program_agreement_task_id,
        p1.start_date AS previous_program_start_date,
        p2.start_date AS next_program_start_date,
        p1.end_date AS previous_program_end_date,
        p2.end_date AS next_program_end_date
    FROM ProgramAgreementTasks p1
    JOIN program_table p2 ON p1.member_id = p2.member_id 
        AND p1.program_id != p2.program_id
        AND p1.start_date < p2.start_date
)

SELECT 
    t.member_id, 
    t.task_id AS adhoc_task_id, 
    pc.previous_program_id,
    pc.next_program_id,
    CASE 
        WHEN t.task_id > pc.previous_program_agreement_task_id 
        AND t.task_id < pc.next_program_agreement_task_id 
        AND t.task_date BETWEEN pc.previous_program_start_date AND pc.next_program_end_date THEN 'Belongs between these programs'
        ELSE 'Does not fit between these programs'
    END AS program_association
FROM task_table t
JOIN ProgramComparisons pc ON t.member_id = pc.member_id
WHERE t.program_id = -1  -- filter for adhoc tasks only
ORDER BY t.member_id, t.task_id, pc.previous_program_id, pc.next_program_id;
