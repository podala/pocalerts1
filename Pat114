import json
from openpyxl import load_workbook
from openpyxl.utils import get_column_letter

# === CONFIGURATION ===
INPUT_FILE = "input.xlsx"
SHEET_NAME = "RA Output"
OUTPUT_FILE = "output_patterns_2_3.json"
MAX_ROWS = 1000
COL_PATTERN_2_START = 1    # A = 1
COL_PATTERN_2_END = 18     # R = 18
COL_PATTERN_3_START = 19   # S = 19
MAX_COLS = 50              # Extend if needed

# === Pattern 2: Top-down ===
def extract_pattern_2_top_down(ws):
    extracted = []
    headers = [ws.cell(row=1, column=col).value for col in range(COL_PATTERN_2_START, COL_PATTERN_2_END + 1)]
    for row_idx in range(2, MAX_ROWS + 1):
        for col_idx in range(COL_PATTERN_2_START, COL_PATTERN_2_END + 1):
            header = headers[col_idx - COL_PATTERN_2_START]
            value = ws.cell(row=row_idx, column=col_idx).value
            if header and value is not None:
                extracted.append({
                    "pattern": "Pattern2",
                    "row": row_idx,
                    "col": col_idx,
                    "excelColumn": get_column_letter(col_idx),
                    "colName": header,
                    "value": value
                })
    return extracted

# === Pattern 3: Nested Headers ===
def extract_pattern_3_nested_grid(ws):
    extracted = []
    section_name = ws.cell(row=1, column=COL_PATTERN_3_START).value
    subheader1 = ws.cell(row=2, column=COL_PATTERN_3_START).value
    subheaders = [ws.cell(row=2, column=col).value for col in range(COL_PATTERN_3_START + 1, MAX_COLS + 1)]
    subsub_headers = [ws.cell(row=3, column=col).value for col in range(COL_PATTERN_3_START + 1, MAX_COLS + 1)]

    for row_idx in range(4, MAX_ROWS + 1):
        for col_idx in range(COL_PATTERN_3_START + 1, MAX_COLS + 1):
            value = ws.cell(row=row_idx, column=col_idx).value
            if value is not None:
                extracted.append({
                    "pattern": "Pattern3",
                    "row": row_idx,
                    "col": col_idx,
                    "excelColumn": get_column_letter(col_idx),
                    "headerName": section_name,
                    "subHeader1": subheader1,
                    "subHeader2": subheaders[col_idx - (COL_PATTERN_3_START + 1)],
                    "subSubHeader": subsub_headers[col_idx - (COL_PATTERN_3_START + 1)],
                    "value": value
                })
    return extracted

# === Main extraction ===
def extract_patterns(file_path, sheet_name):
    wb = load_workbook(file_path, data_only=True)
    ws = wb[sheet_name]
    results = []
    results.extend(extract_pattern_2_top_down(ws))
    results.extend(extract_pattern_3_nested_grid(ws))
    return results

# === Execution ===
if __name__ == "__main__":
    try:
        records = extract_patterns(INPUT_FILE, SHEET_NAME)
        with open(OUTPUT_FILE, "w", encoding="utf-8") as f:
            json.dump(records, f, indent=2, ensure_ascii=False)
    except Exception as e:
        print(f"‚ùå ERROR: {e}")
