from llm_handler import LLMHandler
from query_documentation import QueryDocumentation
import time

class QueryProcessor:
    """
    Handles full query execution, validation, and documentation.
    """

    def __init__(self):
        self.llm = LLMHandler()
        self.doc_generator = QueryDocumentation()

    def process_query(self, user_query, sql_dialect, table_info):
        """
        Executes the query end-to-end with documentation.
        """
        start_time = time.time()
        
        # Step 1: Generate SQL Query
        sql_query, tokens_used_gen, cost_gen = self.llm.generate_sql(sql_dialect, table_info, user_query)

        # Step 2: Validate SQL
        validated_sql, tokens_used_val, cost_val = self.llm.validate_sql(sql_query, sql_dialect)

        # Step 3: Execute SQL (Simulated Execution Time)
        execution_time = round(time.time() - start_time, 3)

        # Step 4: Analyze Query
        analysis_summary = self.llm.analyze_query("Sample Query Output", user_query)

        # Step 5: Log Documentation
        query_doc = self.doc_generator.generate_query_documentation(
            user_query=user_query,
            sql_query=validated_sql,
            execution_time=execution_time,
            cost=cost_gen + cost_val,
            tokens_used=tokens_used_gen + tokens_used_val,
            analysis=analysis_summary
        )

        return query_doc
