Let me clarify how the Hybrid Approach: Embedded and Referenced Documents works in conjunction with the Single Collection with Dynamic Grouping (pl_groups).

Core Idea:
Single Collection (pl_groups): This collection holds documents that group multiple headers associated with a single P&L ID (pl_id). Each document contains a group_id to logically organize headers (e.g., by category like Revenue, Expenses).
Hybrid Approach: Within these documents in pl_groups, smaller headers with fewer map variables are embedded directly, while larger headers (those with many map variables) are stored separately in another collection (pl_headers) and referenced by their header_id.
How It Works Together
pl_groups Collection:

This is the main collection where most of the data resides.
It holds documents that group headers logically by group_id.
Smaller, less complex headers are embedded directly within the documents in this collection.
Referencing Larger Headers:

When a header has a large number of map variables, it may be more efficient to store this header separately in a secondary collection (pl_headers).
In the pl_groups document, instead of embedding the large header, you store a reference to it using a reference_id.
Secondary Collection (pl_headers):

This collection holds the actual large headers with extensive map variables.
Each document in pl_headers corresponds to a large header that is referenced from pl_groups.
Example Workflow
Document in pl_groups (Embedded and Referenced Data):
json
Copy code
{
  "_id": ObjectId("64e56c7d8e2d3c0a5f000001"),
  "pl_id": "PL12345",  // P&L ID
  "group_id": "RevenueGroup",  // Logical group identifier
  "headers": [
    {
      "header_id": "H001",
      "name": "Product Sales",
      "channel_id": "CH01",
      "brand_generic": "BrandA",
      "spnonsp": "SP",
      "pl_standard": "Standard1",
      "map_variables": [
        {
          "variable_id": "V001",
          "value": 100000,
          "additional_info": {
            "currency": "USD"
          }
        }
        // Additional map variables...
      ]
    },
    {
      "header_id": "H002",
      "name": "Service Revenue",
      "channel_id": "CH02",
      "brand_generic": "BrandB",
      "spnonsp": "Non-SP",
      "pl_standard": "Standard2",
      "reference_id": ObjectId("64e56c7d8e2d3c0a5f000002")  // Reference to a large header in `pl_headers`
    }
    // Additional headers...
  ],
  "created_at": ISODate("2024-08-19T00:00:00Z"),
  "updated_at": ISODate("2024-08-19T00:00:00Z")
}
Corresponding Document in pl_headers (Referenced Large Header):
json
Copy code
{
  "_id": ObjectId("64e56c7d8e2d3c0a5f000002"),
  "header_id": "H002",
  "pl_id": "PL12345",
  "name": "Service Revenue",
  "map_variables": [
    {
      "variable_id": "V003",
      "value": 500000,
      "additional_info": {
        "currency": "EUR"
      }
    }
    // Many more map variables...
  ],
  "created_at": ISODate("2024-08-19T00:00:00Z"),
  "updated_at": ISODate("2024-08-19T00:00:00Z")
}
Integration Flow:
Embedding Small Headers:

In the pl_groups collection, directly embed headers that have fewer map variables. This makes accessing and managing these headers straightforward and efficient.
Referencing Large Headers:

For headers with a large number of map variables, store them separately in pl_headers to avoid making the main document in pl_groups too large.
Use a reference_id in the pl_groups document to point to the corresponding document in pl_headers.
Reading Data:

When you query pl_groups, you retrieve both the embedded headers and references to larger headers.
If you need the large headers, an additional query to pl_headers based on the reference_id retrieves the full header data.
Writing Data:

Smaller headers are written directly into pl_groups.
Larger headers are split out and written to pl_headers, with a reference to them stored in pl_groups.
Benefits:
Efficiency: Small and simple headers are easily managed within the main pl_groups collection, minimizing the number of collections you have to deal with.
Scalability: By separating large headers, you prevent documents in pl_groups from becoming too large, ensuring you stay within MongoDBâ€™s document size limits.
Flexibility: This hybrid approach allows you to handle varying sizes of headers while maintaining a single, organized collection structure for the main data.
