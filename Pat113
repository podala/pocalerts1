import json
import re
from openpyxl import load_workbook
from openpyxl.utils import get_column_letter

# === CONFIGURATION ===
INPUT_FILE = "/mnt/data/input.xlsx"
SHEET_NAME = "RA Output"
OUTPUT_FILE = "/mnt/data/extracted_patterns.json"
MAX_ROWS = 1000
MAX_COLS = 100

def extract_pattern_1_same_row(ws):
    extracted = []
    for row in ws.iter_rows(min_row=1, max_row=MAX_ROWS):
        for cell in row:
            if isinstance(cell.value, str) and ":" in cell.value:
                parts = cell.value.split(":", 1)
                col_name = parts[0].strip()
                value = parts[1].strip()
                extracted.append({
                    "pattern": "Pattern1",
                    "row": cell.row,
                    "col": cell.column,
                    "excelColumn": get_column_letter(cell.column),
                    "colName": col_name,
                    "value": value
                })
    return extracted

def extract_pattern_2_top_down(ws):
    extracted = []
    headers = [ws.cell(row=1, column=col).value for col in range(1, MAX_COLS + 1)]
    for row_idx in range(2, MAX_ROWS + 1):
        for col_idx in range(1, MAX_COLS + 1):
            header = headers[col_idx - 1]
            value = ws.cell(row=row_idx, column=col_idx).value
            if header and value is not None:
                extracted.append({
                    "pattern": "Pattern2",
                    "row": row_idx,
                    "col": col_idx,
                    "excelColumn": get_column_letter(col_idx),
                    "colName": header,
                    "value": value
                })
    return extracted

def extract_pattern_3_nested_grid(ws):
    extracted = []
    for row in ws.iter_rows(min_row=4, max_row=MAX_ROWS, max_col=MAX_COLS):
        row_idx = row[0].row
        try:
            section_name = ws.cell(row=1, column=1).value
            subheader1 = ws.cell(row=2, column=1).value
            subheaders = [ws.cell(row=2, column=col).value for col in range(2, MAX_COLS + 1)]
            subsub_headers = [ws.cell(row=3, column=col).value for col in range(2, MAX_COLS + 1)]
            for col_idx in range(2, MAX_COLS + 1):
                value = ws.cell(row=row_idx, column=col_idx).value
                if value is not None:
                    extracted.append({
                        "pattern": "Pattern3",
                        "row": row_idx,
                        "col": col_idx,
                        "excelColumn": get_column_letter(col_idx),
                        "headerName": section_name,
                        "subHeader1": subheader1,
                        "subHeader2": subheaders[col_idx - 2],
                        "subSubHeader": subsub_headers[col_idx - 2],
                        "value": value
                    })
        except:
            continue
    return extracted

def extract_all_patterns(file_path, sheet_name):
    wb = load_workbook(file_path, data_only=True)
    ws = wb[sheet_name]
    results = []
    results.extend(extract_pattern_1_same_row(ws))
    results.extend(extract_pattern_2_top_down(ws))
    results.extend(extract_pattern_3_nested_grid(ws))
    return results

records = extract_all_patterns(INPUT_FILE, SHEET_NAME)

with open(OUTPUT_FILE, "w", encoding="utf-8") as f:
    json.dump(records, f, indent=2, ensure_ascii=False)

import pandas as pd
df = pd.DataFrame(records[:200])
import ace_tools as tools; tools.display_dataframe_to_user(name="Extracted Patterns", dataframe=df)
